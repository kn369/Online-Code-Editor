export const directions = [
    'to left',
    'to top left',
    'to bottom left',
    'to right',
    'to top right',
    'to bottom right',
    'to top',
    'to bottom',
];
export const defaultStyles = {
    WebkitBackgroundClip: 'text',
    WebkitTextFillColor: 'transparent',
    WebkitBoxDecorationBreak: 'clone',
};
const genDefaultStyle = (fallbackColor) => fallbackColor
    ? { ...defaultStyles, backgroundColor: fallbackColor }
    : defaultStyles;
export const toRadialStyle = (gradient, fallbackColor) => {
    if (!Array.isArray(gradient))
        throw new Error(`Expected gradient to be of type (gradient={[<color values>]), got '${gradient}'`);
    return {
        ...genDefaultStyle(fallbackColor),
        backgroundImage: `radial-gradient(${gradient})`,
    };
};
export const toLinearStyle = (gradient, fallbackColor) => {
    const [dir, colors] = gradient;
    const direction = directions.includes(dir) ? dir : null;
    if (!direction)
        throw new Error(`Expected gradient to be of type (gradient={["<direction>", [<color values>]]), got '${gradient}'`);
    return {
        ...genDefaultStyle(fallbackColor),
        backgroundImage: `linear-gradient(${direction}, ${colors})`,
    };
};
export const toGradientStyle = (gradient, gradientType, fallbackColor) => {
    if (gradientType === 'radial')
        return toRadialStyle(gradient, fallbackColor);
    if (gradientType === 'linear')
        return toLinearStyle(gradient, fallbackColor);
};
//# sourceMappingURL=transformGradient.js.map