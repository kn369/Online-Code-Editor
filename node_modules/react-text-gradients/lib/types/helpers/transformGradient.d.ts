import { GradientTypes, Linear, Radial } from '../types';
export declare const directions: readonly ["to left", "to top left", "to bottom left", "to right", "to top right", "to bottom right", "to top", "to bottom"];
export type Directions = typeof directions[number];
export declare const defaultStyles: {
    readonly WebkitBackgroundClip: "text";
    readonly WebkitTextFillColor: "transparent";
    readonly WebkitBoxDecorationBreak: "clone";
};
export declare const toRadialStyle: (gradient: Radial, fallbackColor?: string) => {
    backgroundImage: `radial-gradient(${string})`;
    WebkitBackgroundClip: "text";
    WebkitTextFillColor: "transparent";
    WebkitBoxDecorationBreak: "clone";
} | {
    backgroundImage: `radial-gradient(${string})`;
    backgroundColor: string;
    WebkitBackgroundClip: "text";
    WebkitTextFillColor: "transparent";
    WebkitBoxDecorationBreak: "clone";
};
export declare const toLinearStyle: (gradient: Linear, fallbackColor?: string) => {
    backgroundImage: `linear-gradient(to left, ${string})` | `linear-gradient(to top left, ${string})` | `linear-gradient(to bottom left, ${string})` | `linear-gradient(to right, ${string})` | `linear-gradient(to top right, ${string})` | `linear-gradient(to bottom right, ${string})` | `linear-gradient(to top, ${string})` | `linear-gradient(to bottom, ${string})`;
    WebkitBackgroundClip: "text";
    WebkitTextFillColor: "transparent";
    WebkitBoxDecorationBreak: "clone";
} | {
    backgroundImage: `linear-gradient(to left, ${string})` | `linear-gradient(to top left, ${string})` | `linear-gradient(to bottom left, ${string})` | `linear-gradient(to right, ${string})` | `linear-gradient(to top right, ${string})` | `linear-gradient(to bottom right, ${string})` | `linear-gradient(to top, ${string})` | `linear-gradient(to bottom, ${string})`;
    backgroundColor: string;
    WebkitBackgroundClip: "text";
    WebkitTextFillColor: "transparent";
    WebkitBoxDecorationBreak: "clone";
};
export declare const toGradientStyle: (gradient: Linear | Radial, gradientType: GradientTypes, fallbackColor?: string) => {
    backgroundImage: `radial-gradient(${string})`;
    WebkitBackgroundClip: "text";
    WebkitTextFillColor: "transparent";
    WebkitBoxDecorationBreak: "clone";
} | {
    backgroundImage: `linear-gradient(to left, ${string})` | `linear-gradient(to top left, ${string})` | `linear-gradient(to bottom left, ${string})` | `linear-gradient(to right, ${string})` | `linear-gradient(to top right, ${string})` | `linear-gradient(to bottom right, ${string})` | `linear-gradient(to top, ${string})` | `linear-gradient(to bottom, ${string})`;
    WebkitBackgroundClip: "text";
    WebkitTextFillColor: "transparent";
    WebkitBoxDecorationBreak: "clone";
} | undefined;
